<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.0.xsd  
                        http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd   
				        http://www.springframework.org/schema/tx   
				        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
				        http://www.springframework.org/schema/aop 
				        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
				        http://www.springframework.org/schema/task 
				        http://www.springframework.org/schema/task/spring-task.xsd ">

	<!-- 扫描包里下的所有class文件，配置注解的类全都装入容器中进行管理 -->
	<context:component-scan base-package="com.demo.*,com.base.*" />

	<!-- 连接池方式配置数据源 -->
	<!-- 
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/tp"/> 
	</bean>
    <bean id="dataSourceMonitor" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/task"/> 
	</bean>
	 -->

	<!--jdbc方式配置数据源 -->
	<!--创建jdbc数据源(默认的) 开发环境 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password
        <property name="url" value="jdbc:mysql://192.168.136.251:3306/tp_develop?characterEncoding=utf-8" />
        <property name="username" value="root" />
        <property name="password" value="neusoft123" />
        <property name="validationQuery" value="SELECT 'x' " /> -->
		<!--
          <property name="url" value="jdbc:oracle:thin:@edu.neusoft.com:5233/tp" />
       <property name="username" value="tp_pfct" />
       <property name="password" value="neusoft" />
       <property name="validationQuery" value="SELECT 'x' from dual " />
       <property name="url" value="jdbc:oracle:thin:@edu.neusoft.com:5233/dcptest" />
       <property name="username" value="tp_dut2" />
       <property name="password" value="neusoft" />
       <property name="validationQuery" value="SELECT 'x' from dual " />


		<property name="url" value="jdbc:oracle:thin:@edu.neusoft.com:89/orclv5" />
		<property name="username" value="tp_dut" />
		<property name="password" value="neusoft" />
		<property name="validationQuery" value="SELECT 'x' from dual " />


		<property name="url" value="jdbc:oracle:thin:@edu.neusoft.com:5233/tp" />
		<property name="username" value="tp_dut" />
		<property name="password" value="neusoft" />
		<property name="validationQuery" value="SELECT 'x' from dual " />

		<property name="url" value="jdbc:mysql://192.168.136.251:3306/tp_develop?characterEncoding=utf-8" />
		<property name="username" value="root" />
		<property name="password" value="neusoft123" />
		<property name="validationQuery" value="SELECT 'x' " />


		<property name="url" value="jdbc:oracle:thin:@edu.neusoft.com:89/orcl" />
		<property name="username" value="tp" />
		<property name="password" value="neusoft" />
		<property name="validationQuery" value="SELECT 'x' from dual " />
 -->

		<property name="url" value="jdbc:oracle:thin:@edu.neusoft.com:5233/tp" />
		<property name="username" value="tp_dut" />
		<property name="password" value="neusoft" />
		<property name="validationQuery" value="SELECT 'x' from dual " />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="10" />
		<property name="maxActive" value="10" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="600000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 开启事务注解驱动 -->
	<tx:annotation-driven />

	<aop:aspectj-autoproxy />

	<!-- Spring的定时 -->
	<task:annotation-driven />

	<!-- Mapper文件扫描配置工具，Spring将自动扫描对应配置路径下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" lazy-init="false">
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="basePackage" value="com.*.mapper" />
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index= "0" ref= "sqlSessionFactory" />
	</bean>

	<!-- 创建SqlSessionFactory，并指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" lazy-init="false">
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>